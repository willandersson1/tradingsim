With portfolio 1000:
==11579== Invalid read of size 4
==11579==    at 0x10B5D0: knapsack_solve(int, int, int*, int*) (main.cpp:223)
==11579==    by 0x10ADA5: main (main.cpp:142)
==11579==  Address 0x2002fd814c is not stack'd, malloc'd or (recently) free'd
==11579== 
==11579== 
==11579== Process terminating with default action of signal 11 (SIGSEGV)
==11579==  Access not within mapped region at address 0x2002FD814C
==11579==    at 0x10B5D0: knapsack_solve(int, int, int*, int*) (main.cpp:223)
==11579==    by 0x10ADA5: main (main.cpp:142)
==11579==  If you believe this happened as a result of a stack
==11579==  overflow in your program's main thread (unlikely but
==11579==  possible), you can try to increase the size of the
==11579==  main thread stack using the --main-stacksize= flag.
==11579==  The main thread stack size used in this run was 8388608.
==11579== 
==11579== HEAP SUMMARY:
==11579==     in use at exit: 0 bytes in 0 blocks
==11579==   total heap usage: 12,631 allocs, 12,631 frees, 887,622 bytes allocated
==11579== 
==11579== All heap blocks were freed -- no leaks are possible
==11579== 
==11579== For lists of detected and suppressed errors, rerun with: -s
==11579== ERROR SUMMARY: 2944 errors from 4 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)

With portfolio size 100:
==11930== 
==11930== Use of uninitialised value of size 8
==11930==    at 0x10B5D0: knapsack_solve(int, int, int*, int*) (main.cpp:223)
==11930==    by 0x10ADA5: main (main.cpp:142)
==11930==  Uninitialised value was created by a stack allocation
==11930==    at 0x10AA77: main (main.cpp:120)
==11930== 
==11930== Invalid read of size 4
==11930==    at 0x10B5D0: knapsack_solve(int, int, int*, int*) (main.cpp:223)
==11930==    by 0x10ADA5: main (main.cpp:142)
==11930==  Address 0x2003004794 is not stack'd, malloc'd or (recently) free'd
==11930== 
==11930== 
==11930== Process terminating with default action of signal 11 (SIGSEGV)
==11930==  Access not within mapped region at address 0x2003004794
==11930==    at 0x10B5D0: knapsack_solve(int, int, int*, int*) (main.cpp:223)
==11930==    by 0x10ADA5: main (main.cpp:142)
==11930==  If you believe this happened as a result of a stack
==11930==  overflow in your program's main thread (unlikely but
==11930==  possible), you can try to increase the size of the
==11930==  main thread stack using the --main-stacksize= flag.
==11930==  The main thread stack size used in this run was 8388608.
==11930== 

And now with 4 times the stacksize: 
valgrind --leak-check=yes --track-origins=yes --main-stacksize=33554432  ./a.out 
==12029== Memcheck, a memory error detector
==12029== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==12029== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==12029== Command: ./a.out
==12029== 
==12029== Conditional jump or move depends on uninitialised value(s)
==12029==    at 0x10B56F: knapsack_solve(int, int, int*, int*) (main.cpp:218)
==12029==    by 0x10ADA5: main (main.cpp:142)
==12029==  Uninitialised value was created by a stack allocation
==12029==    at 0x10AA77: main (main.cpp:120)
==12029== 
==12029== Use of uninitialised value of size 8
==12029==    at 0x10B5D0: knapsack_solve(int, int, int*, int*) (main.cpp:223)
==12029==    by 0x10ADA5: main (main.cpp:142)
==12029==  Uninitialised value was created by a stack allocation
==12029==    at 0x10AA77: main (main.cpp:120)
==12029== 
==12029== Invalid read of size 4
==12029==    at 0x10B5D0: knapsack_solve(int, int, int*, int*) (main.cpp:223)
==12029==    by 0x10ADA5: main (main.cpp:142)
==12029==  Address 0x2003004794 is not stack'd, malloc'd or (recently) free'd
==12029== 
==12029== 
==12029== Process terminating with default action of signal 11 (SIGSEGV)
==12029==  Access not within mapped region at address 0x2003004794
==12029==    at 0x10B5D0: knapsack_solve(int, int, int*, int*) (main.cpp:223)
==12029==    by 0x10ADA5: main (main.cpp:142)
==12029==  If you believe this happened as a result of a stack
==12029==  overflow in your program's main thread (unlikely but
==12029==  possible), you can try to increase the size of the
==12029==  main thread stack using the --main-stacksize= flag.
==12029==  The main thread stack size used in this run was 33554432.
